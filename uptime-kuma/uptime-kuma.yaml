- name: Install uptime-kuma
  hosts: all
  vars:
    uptime_stack_name: "uptime_kuma"
    uptime_deployed: "false"
    docker_primary_env_name: "primary"
  tasks:
    - name: Fail if portainer_api_key is undefined
      ansible.builtin.fail: msg="portainer_api_key is not defined. Create Portainer API key from Portainer UI and set in playbook additional vars."
      when: portainer_api_key is undefined

    - name: Show user info
      debug:
        msg:
          - "docker_stacks_dir is {% if docker_stacks_dir is defined %}defined. Docker stacks files will be stored in {{ docker_stacks_dir }}.{% else %}not defined. Docker stacks files wil be stored in temporary dir.{% endif %}"

    - name: Install httpie
      apt:
        pkg:
          - httpie

    - name: Get primary docker environment via portainer api
      uri:
        url: "https://127.0.0.1:9443/api/endpoints?name={{ docker_primary_env_name }}"
        method: GET
        headers:
          X-API-Key: "{{ portainer_api_key }}"
        validate_certs: false
      register: endpoints_response

    #    - name: Debug endpoints_response
    #      debug:
    #        var: endpoints_response

    - name: Store endpoint Id
      set_fact:
        endpoint_id: "{{ endpoints_response.json[0].Id }}"

    - name: Debug endpoint_id
      debug:
        var: endpoint_id

    - name: Get Swarm ID
      shell: |
        {% raw %}
        docker info --format '{{.Swarm.Cluster.ID}}'
        {% endraw %}
      register: swarm_id_output

    #    - debug:
    #        var: swarm_id_output

    - name: Store Swarm Id
      set_fact:
        swarm_id: "{{ swarm_id_output.stdout }}"

    - debug:
        var: swarm_id

    - name: Get deployed stacks
      uri:
        url: "https://127.0.0.1:9443/api/stacks"
        method: GET
        headers:
          X-API-Key: "{{ portainer_api_key }}"
        validate_certs: false
      register: stacks_response

    #    - name: Debug stacks_response
    #      debug:
    #        msg: "{{ stacks_response }}"

    - name: Search for uptime-kuma stack
      set_fact:
        uptime_deployed: "true"
      loop: "{{ stacks_response.json }}"
      loop_control:
        label: "{{ item.Name }}"
      when: item.Name == uptime_stack_name

    - name: Uptime-kuma status
      debug:
        msg: "uptime-kuma deployed: {{ uptime_deployed }}"

    - name: Create docker stacks dir
      file:
        path: "{{ docker_stacks_dir  }}"
        state: directory
      when: uptime_deployed == "false" and docker_stacks_dir is defined

    - name: Create uptime-kuma compose file
      template:
        src: uptime-kuma-compose.yaml.j2
        dest: "{{ docker_stacks_dir | default('/tmp') }}/uptime-kuma-compose.yaml"
        output_encoding: "utf-8"
      when: uptime_deployed == "false"

    - name: Deploy uptime-kuma stack
      shell: |
        http --verify=no --form POST https://127.0.0.1:9443/api/stacks/create/swarm/file \
        X-API-Key:"{{ portainer_api_key }}"  \
        endpointId={{ endpoint_id }} \ 
        SwarmID="{{ swarm_id }}" \
        Name="{{ uptime_stack_name }}" \
        file@"{{ docker_stacks_dir | default('/tmp') }}/uptime-kuma-compose.yaml"
      register: create_stack_response
      failed_when: "'message' in create_stack_response.stdout" #message text appears when stack is failed to deploy
      when: uptime_deployed == "false"
